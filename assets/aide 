use actix_web::{web, App, HttpServer, Responder, HttpResponse};
use actix_files::Files; // Pour servir les fichiers statiques
use actix_web::middleware::Logger;

pub fn init_server() -> std::io::Result<()> {
    HttpServer::new(|| {
        App::new()
            .wrap(Logger::default()) // Middleware pour logger les requêtes
            .route("/", web::get().to(homepage)) // Route principale
            .service(
                web::scope("/auth") // Groupe de routes pour l'authentification
                    .route("/register", web::get().to(register_page))
                    .route("/login", web::get().to(login_page))
                    .route("/register", web::post().to(register_user))
                    .route("/login", web::post().to(login_user))
                    .route("/myvaults", web::get().to(myvaults)),
            )
            .service(Files::new("/static", "./static")) // Servir des fichiers statiques (HTML, CSS, JS)
    })
    .bind("127.0.0.1:8080")?
    .run()
}

async fn homepage() -> impl Responder {
    HttpResponse::Ok().body("<h1>Bienvenue sur mon application!</h1>")
}

async fn register_page() -> impl Responder {
    HttpResponse::Ok().body(include_str!("./static/register.html")) // Charge la page d'enregistrement
}

async fn login_page() -> impl Responder {
    HttpResponse::Ok().body(include_str!("./static/login.html")) // Charge la page de connexion
}

// Fonctions pour traiter les requêtes POST (enregistrement, connexion)
async fn register_user() -> impl Responder {
    HttpResponse::Ok().body("Utilisateur enregistré!")
}

async fn login_user() -> impl Responder {
    HttpResponse::Ok().body("Utilisateur connecté!")
}

async fn myvaults() -> impl Responder {
    HttpResponse::Ok().body("Page sécurisée : MyVaults!")
}
